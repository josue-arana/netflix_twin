{"ast":null,"code":"var _jsxFileName = \"/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const [showError, setShowError] = useState(false); // A snippet of code which runs based on a specific condition.variable. \n\n  useEffect(() => {\n    //if [], rn once when row loads and dont run again. If we add movies variable, then it will run everytime movie changes. \n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  }; // console.table(movies);\n\n  const handleClick = movie => {\n    if (showError) {\n      setShowError(false);\n    }\n\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.original_name) || (movie === null || movie === void 0 ? void 0 : movie.original_title) || \"\").then(url => {\n        // https://www.youtube.com/watch?v=XtMThy8QKqU    <- to get the last part or url\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(encodeURIComponent(urlParams.get('v')));\n      }).catch(error => {\n        if (showError) {\n          setShowError(false);\n        } else {\n          setShowError(true);\n        }\n\n        console.log(error);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 28\n    }, this), showError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"noTrailer\",\n      children: [movies.map(movie => /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://www.youtube.com/results?search_query=${movie.name}`,\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Sorry! We couldn't find this trailer, try selecting another movie or click here to find it on YouTube.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"f6FRyqIdG/XJj/S49RwYK3ADzS4=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","showError","setShowError","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","original_name","original_title","then","url","urlParams","URLSearchParams","URL","search","encodeURIComponent","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":"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","sourcesContent":["import React , {useState, useEffect} from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n    const [showError, setShowError] = useState(false);\n\n    // A snippet of code which runs based on a specific condition.variable. \n    useEffect( () => {\n        //if [], rn once when row loads and dont run again. If we add movies variable, then it will run everytime movie changes. \n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request; \n        }\n        fetchData();\n    }, [fetchUrl]);\n\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1\n        },\n    };\n\n    // console.table(movies);\n    const handleClick = (movie) => {\n\n        if (showError){\n            setShowError(false);\n        }\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n            \n        } else {\n\n            movieTrailer(movie?.name || movie?.title || movie?.original_name || movie?.original_title || \"\")\n            .then(url => {\n                \n                // https://www.youtube.com/watch?v=XtMThy8QKqU    <- to get the last part or url\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(encodeURIComponent(urlParams.get('v')));\n            })\n            .catch((error) => {\n                \n                if (showError){\n                    setShowError(false);\n                }else{\n                    setShowError(true);\n                }\n                console.log(error)\n                \n            });\n        }\n    }\n\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n\n            <div className=\"row__posters\" >\n                {movies.map(movie => (\n                    <img \n                    key={movie.id}\n                    onClick={() => handleClick(movie)}\n                    className= {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path }`} \n                    alt={movie.name}\n                    />\n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />  }\n\n            {showError && \n            <div className=\"noTrailer\">\n                {movies.map(movie => (\n                    <a \n                    href={`https://www.youtube.com/results?search_query=${movie.name}`}\n                    onClick={() => handleClick(movie)}\n                    className= {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path }`} \n                    alt={movie.name}\n                    />\n                ))}\n                <h4>Sorry! We couldn't find this trailer, try selecting another movie or click here to find it on YouTube.</h4>\n                <br/>\n                <br/>\n            </div> }\n            \n        </div>\n    )\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}