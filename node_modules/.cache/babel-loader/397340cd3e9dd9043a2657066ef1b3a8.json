{"ast":null,"code":"var _jsxFileName = \"/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]); // A snippet of code which runs based on a specific condition.variable. \n\n  useEffect(() => {\n    //if [], rn once when row loads and dont run again. If we add movies variable, then it will run everytime movie changes. \n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  }; // console.table(movies);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","map","movie","poster_path","backdrop_path","name","id","trailerUrl"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAE1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC,CAF0C,CAI1C;;AACAC,EAAAA,SAAS,CAAE,MAAM;AACb;AACA,mBAAeU,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUN,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GARQ,EAQN,CAACJ,QAAD,CARM,CAAT;AAWA,QAAMS,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AAERC,MAAAA,QAAQ,EAAE;AAFF;AAHH,GAAb,CAhB0C,CAyB1C;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI;AAAA,gBAAKd;AAAL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKG,MAAM,CAACY,GAAP,CAAWC,KAAK,iBACb;AAEA,QAAA,SAAS,EAAI,eAAcd,UAAU,IAAI,kBAAmB,EAF5D;AAGA,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGc,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aAAe,EAHzE;AAIA,QAAA,GAAG,EAAEF,KAAK,CAACG;AAJX,SACKH,KAAK,CAACI,EADX;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAHJ,eAaI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEC,UAAlB;AAA8B,MAAA,IAAI,EAAEX;AAApC;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GA/CQX,G;;KAAAA,G;AAiDT,eAAeA,GAAf","sourcesContent":["import React , {useState, useEffect} from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n    const [movies, setMovies] = useState([]);\n\n    // A snippet of code which runs based on a specific condition.variable. \n    useEffect( () => {\n        //if [], rn once when row loads and dont run again. If we add movies variable, then it will run everytime movie changes. \n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request; \n        }\n        fetchData();\n    }, [fetchUrl]);\n\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n\n            autoplay: 1,\n        },\n    };\n\n    // console.table(movies);\n\n\n    return (\n        <div className=\"row\">\n\n            <h2>{title}</h2>\n            <div className=\"row__posters\">\n                {movies.map(movie => (\n                    <img \n                    key={movie.id}\n                    className= {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path }`} \n                    alt={movie.name}\n                    />\n                ))}\n            </div>\n            <YouTube videoId={trailerUrl} opts={opts} /> \n             \n\n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}