{"ast":null,"code":"import _regeneratorRuntime from\"/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from'./axios';import'./Row.css';import YouTube from'react-youtube';import movieTrailer from'movie-trailer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),showError=_useState6[0],setShowError=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),movieLink=_useState8[0],setMovieLink=_useState8[1];// A snippet of code which runs based on a specific condition.variable. \nuseEffect(function(){//if [], rn once when row loads and dont run again. If we add movies variable, then it will run everytime movie changes. \nfunction fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;// console.table(request.data.results);\n// setMovies(request.data.results.sort((a,b) => b['vote_average'] - a['vote_average']));\nsetMovies(request.data.results.sort(function(a,b){return 0.5-Math.random();}));// setMovies(shuffle(request.data.results));\nreturn _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};// console.table(movies);\nvar handleClick=function handleClick(movie){if(showError){setShowError(false);}if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||(movie===null||movie===void 0?void 0:movie.title)||(movie===null||movie===void 0?void 0:movie.original_name)||(movie===null||movie===void 0?void 0:movie.original_title)||\"\").then(function(url){// console.table(movie);\n// https://www.youtube.com/watch?v=XtMThy8QKqU    <- to get the last part or url\nvar urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(encodeURIComponent(urlParams.get('v')));}).catch(function(error){if(showError){setShowError(false);}else{setShowError(true);setMovieLink(encodeURIComponent((movie===null||movie===void 0?void 0:movie.title)||(movie===null||movie===void 0?void 0:movie.original_name)||(movie===null||movie===void 0?void 0:movie.original_title)||\"\"));}console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.title},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts}),showError&&/*#__PURE__*/_jsxs(\"div\",{className:\"noTrailer\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"Sorry! We couldn't find this trailer. You may click \",/*#__PURE__*/_jsx(\"a\",{className:\"link__redirect\",target:\"blank\",href:\"https://www.youtube.com/results?search_query=\".concat(movieLink),children:\"here to find it on YouTube.\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{})]})]});}export default Row;","map":{"version":3,"sources":["/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","showError","setShowError","movieLink","setMovieLink","fetchData","get","request","data","results","sort","a","b","Math","random","opts","height","width","playerVars","autoplay","handleClick","movie","name","original_name","original_title","then","url","urlParams","URLSearchParams","URL","search","encodeURIComponent","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":"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","sourcesContent":["import React , {useState, useEffect} from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n    const [showError, setShowError] = useState(false);\n    const [movieLink, setMovieLink] = useState(\"\");\n\n    // A snippet of code which runs based on a specific condition.variable. \n    useEffect( () => {\n        //if [], rn once when row loads and dont run again. If we add movies variable, then it will run everytime movie changes. \n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            // console.table(request.data.results);\n            // setMovies(request.data.results.sort((a,b) => b['vote_average'] - a['vote_average']));\n            setMovies(request.data.results.sort((a,b) => 0.5 - Math.random()));\n            // setMovies(shuffle(request.data.results));\n            return request; \n        }\n        fetchData();\n    }, [fetchUrl]);\n\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1\n        },\n    };\n\n    // console.table(movies);\n    const handleClick = (movie) => {\n\n        if (showError){\n            setShowError(false);\n        }\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n            \n        } else {\n\n            movieTrailer(movie?.name || movie?.title || movie?.original_name || movie?.original_title || \"\")\n            .then(url => {\n                // console.table(movie);\n                // https://www.youtube.com/watch?v=XtMThy8QKqU    <- to get the last part or url\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(encodeURIComponent(urlParams.get('v')));\n            })\n            .catch((error) => {\n                \n                if (showError){\n                    setShowError(false);\n                }else{\n                    setShowError(true);\n                    \n                    setMovieLink(encodeURIComponent(movie?.title || movie?.original_name || movie?.original_title || \"\"));\n                }\n                console.log(error)\n                \n            });\n        }\n    }\n\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row__posters\" >\n                {movies.map(movie => (\n                    <img \n                    key={movie.id}\n                    onClick={() => handleClick(movie)}\n                    className= {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                    alt={movie.title}\n                    />\n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />  }\n\n            {showError && \n            <div className=\"noTrailer\">\n                <h4>Sorry! We couldn't find this trailer. You may click <a className=\"link__redirect\" target=\"blank\" href={`https://www.youtube.com/results?search_query=${movieLink}`}>here to find it on YouTube.</a></h4>\n                <br/>\n                <br/>\n            </div> }\n            \n        </div>\n    )\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}