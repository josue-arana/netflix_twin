{"ast":null,"code":"var _jsxFileName = \"/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]); // A snippet of code which runs based on a specific condition.variable. \n\n  useEffect(() => {\n    //if [], rn once when row loads and dont run again. If we add movies variable, then it will run everytime movie changes. \n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.table(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), \"dfas\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"row__poster\",\n        src: `${base_url}${movie.poster_path}`,\n        alt: movie.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/josuearana/Desktop/Personal_Projects/Netflix-Twin-Beta/netflix-twin-beta/src/Row.js"],"names":["React","useState","useEffect","axios","base_url","Row","title","fetchUrl","movies","setMovies","fetchData","request","get","data","results","console","table","map","movie","poster_path","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAb,EAAkC;AAAA;;AAE9B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC,CAF8B,CAI9B;;AACAC,EAAAA,SAAS,CAAE,MAAM;AACb;AACA,mBAAeQ,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAUL,QAAV,CAAtB;AACAE,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GARQ,EAQN,CAACH,QAAD,CARM,CAAT;AAUAQ,EAAAA,OAAO,CAACC,KAAR,CAAcR,MAAd;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,uBAII;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA,gBAEKE,MAAM,CAACS,GAAP,CAAWC,KAAK,iBACb;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,GAAG,EAAG,GAAEd,QAAS,GAAEc,KAAK,CAACC,WAAY,EAAlE;AAAqE,QAAA,GAAG,EAAED,KAAK,CAACE;AAAhF;AAAA;AAAA;AAAA;AAAA,cADH;AAFL;AAAA;AAAA;AAAA;AAAA,YAJJ,eAWI;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GArCQf,G;;KAAAA,G;AAuCT,eAAeA,GAAf","sourcesContent":["import React , {useState, useEffect} from 'react';\nimport axios from './axios';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl }) {\n\n    const [movies, setMovies] = useState([]);\n\n    // A snippet of code which runs based on a specific condition.variable. \n    useEffect( () => {\n        //if [], rn once when row loads and dont run again. If we add movies variable, then it will run everytime movie changes. \n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request; \n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    console.table(movies);\n\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>dfas\n            \n\n            <div className=\"\">\n                {/* several row_posters */}\n                {movies.map(movie => (\n                    <img className=\"row__poster\" src={`${base_url}${movie.poster_path}`} alt={movie.name}/>\n                ))}\n            </div>\n\n            <ul> \n\n                    </ul>\n             \n\n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}